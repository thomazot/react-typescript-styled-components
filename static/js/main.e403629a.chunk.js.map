{"version":3,"sources":["stores/repositories/types.ts","stores/repositories/index.ts","stores/rootReducer.ts","services/api.ts","stores/repositories/sagas.ts","stores/repositories/actions.ts","stores/rootSaga.ts","stores/index.ts","components/repository/item.tsx","components/repository/list.tsx","components/Title/styled.tsx","components/Title/Title.tsx","theme/GlobalStyle.ts","theme/Config.ts","theme/Theme.tsx","Layout/Default/styled.ts","Layout/Default/Default.tsx","pages/Home.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["RepositoriesTypes","INITAL_STATE","data","id","name","error","loading","reducer","state","type","payload","LOAD_REQUEST","LOAD_SUCCESS","LOAD_FAILURE","combineReducers","repositories","Api","axios","create","baseURL","load","call","get","response","put","action","rootSaga","all","takeLatest","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","thunk","run","Item","repository","List","dispatch","useDispatch","useSelector","useEffect","map","key","Heading","styled","div","level","Title","tag","children","useState","setLevel","parseFloat","replace","as","GlobalStyle","createGlobalStyle","Config","Layout","theme","Container","Default","Theme","HomePage","Routes","exact","path","Home","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e403629a.chunk.js","sourcesContent":["/**\n *  Actions Types\n */\nexport enum RepositoriesTypes {\n    LOAD_REQUEST = '@repositories/LOAD_REQUEST',\n    LOAD_SUCCESS = '@repositories/LOAD_SUCCESS',\n    LOAD_FAILURE = '@repositories/LOAD_FAILURE',\n}\n\n/**\n * Data types\n */\nexport interface Repository {\n    id: number\n    name: string\n}\n\n/**\n * State type\n */\nexport interface RepositoriesState {\n    readonly data: Repository[]\n    readonly loading: boolean\n    readonly error: boolean\n}\n","\nimport { Reducer } from 'redux'\nimport { RepositoriesState, RepositoriesTypes } from './types'\n\nconst INITAL_STATE:RepositoriesState = {\n    data: [{\n        id: 1, name: 'Thomaz',\n    }],\n    error: false,\n    loading: false,\n}\n\nconst reducer: Reducer<RepositoriesState> = (state = INITAL_STATE, { type, payload }) => {\n    switch (type) {\n    case RepositoriesTypes.LOAD_REQUEST:\n        return { ...state, loading: true }\n    case RepositoriesTypes.LOAD_SUCCESS:\n        return {\n            ...state, loading: false, error: false, data: payload.data,\n        }\n    case RepositoriesTypes.LOAD_FAILURE:\n        return {\n            ...state, loading: false, error: true, data: [],\n        }\n    default:\n        return state\n    }\n}\n\nexport default reducer\n","import { combineReducers } from 'redux'\nimport repositories from './repositories'\n\nexport default combineReducers({\n    repositories,\n})\n","import axios from 'axios'\n\nconst Api = axios.create({\n    baseURL: 'https://api.github.com',\n})\n\nexport default Api\n","import { call, put } from 'redux-saga/effects'\nimport { loadSuccess, loadFailure } from './actions'\nimport Api from '../../services/api'\n\nexport function* load() {\n    try {\n        const response = yield call(Api.get, 'users/thomazot/repos')\n        yield put(loadSuccess(response.data))\n    } catch (err) {\n        yield put(loadFailure())\n    }\n}\n","import { action } from 'typesafe-actions'\nimport { RepositoriesTypes, Repository } from './types'\n\nexport const loadRequest = () => action(RepositoriesTypes.LOAD_REQUEST)\nexport const loadSuccess = (data: Repository[]) => action(RepositoriesTypes.LOAD_SUCCESS, { data })\nexport const loadFailure = () => action(RepositoriesTypes.LOAD_FAILURE)\n","import { all, takeLatest } from 'redux-saga/effects'\nimport { RepositoriesTypes } from './repositories/types'\nimport { load } from './repositories/sagas'\n\nexport default function* rootSaga() {\n    return yield all([\n        takeLatest(RepositoriesTypes.LOAD_REQUEST, load),\n    ])\n}\n","import {\n    createStore, applyMiddleware, Store, compose,\n} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport thunk from 'redux-thunk'\nimport { RepositoriesState } from './repositories/types'\nimport rootReducer from './rootReducer'\nimport rootSaga from './rootSaga'\n\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n    || compose\n\nexport interface ApplicationState {\n    repositories: RepositoriesState\n}\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store: Store<ApplicationState> = createStore(rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware, thunk)))\n\nsagaMiddleware.run(rootSaga)\n\nexport default store\n","import React from 'react'\nimport { Repository } from '../../stores/repositories/types'\n\ninterface Props {\n    repository: Repository\n}\n\nconst Item = ({ repository }: Props) => <div>{repository.name}</div>\n\nexport default Item\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Repository } from '../../stores/repositories/types'\nimport { loadRequest } from '../../stores/repositories/actions'\nimport { ApplicationState } from '../../stores/index'\nimport Item from './item'\n\nconst List = () => {\n    const dispatch = useDispatch()\n    const repositories: Repository[] = useSelector(\n        (state: ApplicationState) => state.repositories.data,\n    )\n\n    useEffect(() => {\n        dispatch(loadRequest())\n    }, [dispatch])\n\n    return (\n        <div>\n            {repositories.map((repository) => (\n                <Item key={repository.id} repository={repository} />\n            ))}\n        </div>\n    )\n}\n\nexport default List\n","\nimport styled from 'styled-components'\n\n\ninterface Props {\n    level: number\n}\n\n\nexport const Heading = styled.div<Props>`\n    font-size: ${({ level }) => 2.5 / level}em;\n`\n","import React, { ReactNode, useState, useEffect } from 'react'\nimport * as S from './styled'\n\ntype Props = {\n    tag?: 'h1' | 'h2' | 'h3' | 'h4'\n    children: ReactNode\n}\n\nconst Title = ({ tag = 'h1', children }: Props) => {\n    const [level, setLevel] = useState(1)\n\n    useEffect(() => {\n        setLevel(parseFloat(tag.replace(/\\D/g, '')))\n    }, [tag])\n\n    return <S.Heading as={tag} level={level}>{children}</S.Heading>\n}\n\nexport default Title\n","import { createGlobalStyle } from 'styled-components'\n\n\nexport const GlobalStyle = createGlobalStyle`\n\n`\n","const Config = {\n\n}\n\nexport default Config\n","import React, { ReactNode } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { Normalize } from 'styled-normalize'\nimport { GlobalStyle } from './GlobalStyle'\nimport theme from './Config'\n\ntype Props = {\n    children: ReactNode\n}\n\nconst Layout = ({ children }: Props) => (\n    <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        { children }\n    </ThemeProvider>\n)\n\nexport default Layout\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    width: 1300px;\n    max-width: calc(100% - 30px);\n    margin: 0 auto;\n`\n","import React, { ReactNode } from 'react'\nimport { Theme } from '../../theme'\nimport * as S from './styled'\n\ntype Props = {\n    children: ReactNode\n}\n\nconst Default = ({ children }: Props) => (\n    <Theme>\n        <S.Container>\n            {children}\n        </S.Container>\n    </Theme>\n)\n\nexport default Default\n","import React from 'react'\nimport { ListRepository } from '../components/repository'\nimport { Title } from '../components/Title'\nimport { LayoutDefault } from '../Layout'\n\nconst HomePage = () => (\n    <LayoutDefault>\n        <Title>List Repository</Title>\n        <ListRepository />\n    </LayoutDefault>\n)\n\nexport default HomePage\n","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from 'react-router-dom'\nimport { HomePage } from '../pages'\n\nconst Routes = () => (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\">\n                <HomePage />\n            </Route>\n\n        </Switch>\n    </Router>\n)\n\nexport default Routes\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport store from './stores'\nimport Routes from './routes'\n\nconst App: React.FC = () => (\n    <Provider store={store}>\n        <Routes />\n    </Provider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}